---
import NavLayout from '../../layouts/NavLayout.astro'
import { getStories, getSagas, getSongs } from '../../data'
import { toStory } from '../../router'
import StoryPage from '../../components/Page/StoryPage.vue'
import RelatedStories from '../../components/Navigation/RelatedStories.vue'
import Breadcrumbs from '../../components/Navigation/Breadcrumbs.vue'
import t from '../../translations'
const siteUrl = import.meta.env.PUBLIC_SITE_URL
const author = import.meta.env.PUBLIC_SITE_NAME

const stories = getStories()
const sagas = getSagas()
const songs = getSongs()

const { id } = Astro.params
const story = stories.find(story => story.key === id)
const currentSaga = sagas.find(saga => saga.key === story.saga)
const lang = import.meta.env.PUBLIC_LANG
const firstParagraph = story.story.split('\n').filter(p => p.trim() !== '')[0]

const relatedSong = story.song ? songs.find(s => s.song === story.song) : null

export async function getStaticPaths() {
  const paths = getStories().map(story => ({
    params: {
      story: import.meta.env.PUBLIC_LANG === 'en' ? 'story' : 'cuento',
      id: story.key
    }
  }))

  return paths
}

export async function getStaticProps({ params }) {
  const { type, slug } = params
  if (type !== 'story' || !stories[slug]) {
    return {
      notFound: true
    }
  }

  const content = stories[slug]

  return {
    props: {
      content
    }
  }
}

const formatDate = dateStr => {
  const [day, month, year] = dateStr.split('/')
  const fullYear = `${year}`
  return `${fullYear}-${month}-${day}T00:00:00Z`
}

const schema = JSON.stringify({
  '@context': 'https://schema.org',
  '@type': 'CreativeWork',
  '@id': `${siteUrl}${toStory(story.key)}`,
  name: story.name,
  headline: story.name,
  author: {
    '@type': 'Organization',
    name: author,
    url: siteUrl
  },
  publisher: {
    '@type': 'Organization',
    name: author,
    url: siteUrl,
    logo: {
      '@type': 'ImageObject',
      url: `${siteUrl}/assets/logo/${lang}.webp`
    }
  },
  datePublished: formatDate(story.date),
  dateModified: formatDate(story.date),
  image: {
    '@type': 'ImageObject',
    url: `${siteUrl}/assets/stories/${lang}/${story.key}.webp`,
    width: 1200,
    height: 630
  },
  description: firstParagraph,
  genre: `${t('schema.type')}`,
  inLanguage: lang,
  mainEntityOfPage: {
    '@type': 'WebPage',
    '@id': `${siteUrl}${toStory(story.key)}`
  },
  associatedMedia: [
    {
      '@type': 'VideoObject',
      name: story.name,
      description: firstParagraph,
      thumbnailUrl: `${siteUrl}/assets/stories/${lang}/${story.key}.webp`,
      uploadDate: formatDate(story.date),
      contentUrl: `https://www.youtube.com/watch?v=${story.youtube}`,
      embedUrl: `https://www.youtube.com/embed/${story.youtube}`,
      duration: `PT${Math.round(parseFloat(story.time.replace(',', '.')) || 0)}S`
    },
    {
      '@type': 'AudioObject', 
      name: story.name,
      description: firstParagraph,
      thumbnailUrl: `${siteUrl}/assets/stories/${lang}/${story.key}.webp`,
      uploadDate: formatDate(story.date),
      contentUrl: story.spotifyLink,
      duration: `PT${Math.round(parseFloat(story.time.replace(',', '.')) || 0)}S`
    }
  ]
})
---

<NavLayout
  title={story.name}
  description={firstParagraph}
  image={`/assets/stories/${lang}/${story.key}.webp`}
  url={`${toStory(story.key)}`}
  hasVideo
>
  <StoryPage
    story={story}
    currentSaga={currentSaga}
    relatedSong={relatedSong}
    client:load
    url={`${toStory(story.key)}`}
    title={story.name}
  />

  <RelatedStories
    currentStory={story}
    allStories={stories}
    allSagas={sagas}
    client:idle
  />

  <div id="story-data" data-story={JSON.stringify(story)} style="display:none">
  </div>
  <script type="application/ld+json" set:html={schema} />
</NavLayout>
